package com.hackerrank.tradingplatform.controller;

import com.hackerrank.tradingplatform.dto.AddMoneyTraderDTO;
import com.hackerrank.tradingplatform.dto.TraderDTO;
import com.hackerrank.tradingplatform.dto.UpdateTraderDTO;
import com.hackerrank.tradingplatform.model.Trader;
import com.hackerrank.tradingplatform.service.TraderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import java.util.List;

import static java.util.stream.Collectors.toList;

@RestController
@RequestMapping(value = "/trading/traders")
public class TraderController {
	@Autowired
	private TraderService traderService;

	// register
	@RequestMapping(value = "/register", method = RequestMethod.POST, consumes = "application/json")

	public ResponseEntity<Object> registerTrader(@RequestBody @Valid Trader trader) {

		if (traderService.getTraderByEmail(trader.getEmail()) != null)
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);

		traderService.registerTrader(trader);
		return ResponseEntity.status(HttpStatus.CREATED).body(null);
	}

	// get by email

	@GetMapping("")
	public ResponseEntity<Object> getTraderByEmail(@RequestParam(value = "email", required = false) String email) {

		if (traderService.getTraderByEmail(email) == null)
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(null);

		return ResponseEntity.ok(traderService.getTraderByEmail(email));
	}

	// get all
	@RequestMapping(value = "/all", method = RequestMethod.GET)
	@ResponseStatus(HttpStatus.OK)
	public List<TraderDTO> getAllTraders() {
		return traderService.getAllTraders().stream().sorted((o1, o2) -> o1.getId().compareTo(o2.getId()))
				.map(TraderDTO::new).collect(toList());
	}

	// update by email
	@RequestMapping(method = RequestMethod.PUT)
	@ResponseStatus(HttpStatus.OK)
	public ResponseEntity<Object> updateTrader(@RequestBody @Valid UpdateTraderDTO trader) {
		if (traderService.getTraderByEmail(trader.getEmail()) == null)
			return ResponseEntity.status(HttpStatus.NOT_FOUND).body(null);

		traderService.updateTrader(trader);
		return ResponseEntity.ok(null);

	}

	// add money
	@RequestMapping(value = "/add", method = RequestMethod.PUT)
	@ResponseStatus(HttpStatus.OK)
	public void addMoney(@RequestBody @Valid AddMoneyTraderDTO trader) {
		traderService.addMoney(trader);
	}
}
